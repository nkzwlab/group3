{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","setUser","user","console","log","login_name","id","setState","loggedIn","loginName","login","url","fetch","then","response","json","catch","error","newUrl","method","headers","Headers","text","alert","render","node","state","className","onLogin","onSubmit","React","Component","Login","handleChange","e","target","value","handleSubmit","preventDefault","type","onChange","KadaiList","refreshKadais","kadaiURL","setKadais","data","undefined","kadais","map","kadai","userId","user_id","title","content","draft","editing","editKadai","v","updateDone","doneURL","URLSearchParams","append","err","finally","kadaiItems","key","onDone","refresh","onClick","KadaiItem","startEdit","finishEdit","handleDone","handleEdit","ShowKadai","KadaiEditor","changeHandler","UpdateKadai","updateKadai","body","set","toString","PostKadai","postNewKadai","KadaiForm","input","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.192cc6ab.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loggedIn: false\n        };\n    }\n\n    setUser = user => {\n        console.log(\"logged in as :\", user.login_name)\n\n        if (!user.login_name || !user.id) {\n            throw user[\"error\"];\n        }\n\n        this.setState({loggedIn: true, user: {\n            loginName: user.login_name,\n            id: user.id\n        }});\n    }\n\n    login = loginName => {\n        const url = `http://localhost:8080/user?login_name=${loginName}`\n        fetch(url)\n            .then(response => response.json())\n            .then(this.setUser)\n            .catch(error => {\n                let text = error;\n                if (error[\"error\"]) {\n                    const text = error.error;\n                }\n                const newUrl =  `http://localhost:8080/user/new?login_name=${loginName}`;\n                return fetch(newUrl, {\n                    method:\"POST\",\n                    headers: new Headers({\n                        'Accept': 'application/json',\n                    })\n                })\n            })\n            .then(response => response.json())\n            .then(this.setUser)\n            .catch(error => {\n                let text = error;\n                if (error[\"error\"]) {\n                    const text = error.error;\n                }\n                alert(\"エラーが発生しました：\" + text);\n            });\n    }\n            body: body\n    render = () => {\n        const node = (this.state.loggedIn)\n            ? (\n                <div className=\"mainContent\">\n                    <KadaiList user={this.state.user} />\n                </div>)\n            : <Login onLogin={this.login} onSubmit={this.login} />;\n\n\n        return (\n            <div className=\"App\">\n                <h1 className=\"pageHeader\">課題管理サービス</h1>\n                {node}\n            </div>\n        );\n    }\n}\n\n\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {loginName: \"\"};\n    }\n\n    handleChange = e => {\n        const loginName = e.target.value;\n        this.setState({loginName});\n    }\n\n    handleSubmit = e => {\n        this.props.onSubmit(this.state.loginName);\n        e.preventDefault();\n    }\n\n    render = () => (\n        <form className=\"loginForm\" onSubmit={this.handleSubmit}>\n            <input type=\"text\" value={this.state.loginName} onChange={this.handleChange} />\n            <input type=\"submit\" value=\"ログイン\" />\n        </form>\n    );\n}\n\n\n\n\nclass KadaiList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.refreshKadais()\n\n        this.state = {\n            kadais: [],\n        };\n    }\n\n    refreshKadais = () => {\n        console.log(\"refresh\");\n        const kadaiURL = `http://localhost:8080/kadai?user_id=${this.props.user.id}`;\n        fetch(kadaiURL)\n            .then(response => response.json())\n            .then(this.setKadais)\n            .catch(error => {\n                let text = error;\n                if (error[\"error\"]) {\n                    const text = error.error;\n                }\n                alert(\"エラーが発生しました：\" + text);\n            });\n    }\n\n    setKadais = data => {\n        if (data !== null && data !== undefined) {\n            const kadais = data.map(kadai => {\n                return {\n                    id: kadai.id,\n                    userId: kadai.user_id,\n                    title: kadai.title,\n                    content: kadai.content,\n                    draft: kadai.draft,\n                    editing: false\n                };\n            })\n            this.setState({kadais: kadais});\n        } else {\n            this.setState({kadais: []});\n        }\n    }\n\n    editKadai = kadai => {\n        const kadais = this.state.kadais.map(v => {\n            if (v.id === kadai.id) {\n                v.editing = true;\n            }\n            return v;\n        });\n        this.setState(kadais);\n    }\n\n    updateDone = id => {\n        const doneURL = `http://localhost:8080/kadai/done?kadai_id=${id}`;\n\n        const body = new URLSearchParams();\n        body.append('kadai_id', id);\n\n        fetch(doneURL, {\n            method: \"POST\",\n        })\n            .then(response => alert(\"done!\"))\n            .catch(err => {\n                console.error(\"error!: \", err);\n            })\n            .finally(() => {\n                this.refreshKadais();\n            })\n    }\n\n    render = () => {\n        const kadaiItems = this.state.kadais.map(kadai => (\n            <KadaiItem\n                user={this.props.user}\n                key={kadai.id}\n                kadai={kadai}\n                onDone={this.updateDone}\n                refresh={this.refreshKadais}\n                editing={kadai.editing}\n            />)\n        );\n\n        return (\n            <div>\n                <h2>未提出課題一覧</h2>\n                <button onClick={this.refreshKadais}>再読み込み</button>\n                {kadaiItems}\n                <h2>新しい課題を登録する</h2>\n                <PostKadai refresh={this.refreshKadais}\n                           user={this.props.user} />\n            </div>\n        )\n    }\n}\n\nclass KadaiItem extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {kadai: this.props.kadai};\n    }\n\n    startEdit = e => {\n        console.log(\"edit started\");\n        let kadai = this.state.kadai;\n        kadai.editing = true;\n        this.setState({kadai});\n    }\n\n    finishEdit = kadai => {\n        console.log(\"edit finished\");\n        kadai.editing = false;\n        this.setState({kadai})\n    }\n\n    handleDone = e => {\n        this.props.onDone(this.state.kadai.id);\n        this.props.refresh();\n    }\n\n    render = () => {\n        const kadai = this.state.kadai;\n\n        const node = (kadai.editing)\n            ? <UpdateKadai kadai={kadai}\n                           finishEdit={this.finishEdit}\n                           refresh={this.props.refresh} />\n            : <ShowKadai kadai={kadai}\n                         handleEdit={this.startEdit}\n                         handleDone={this.handleDone}/>;\n\n        return (\n            <div className=\"kadaiItem\">\n                {node}\n            </div>\n        );\n    }\n}\n\nclass ShowKadai extends React.Component {\n    constructor(props) {\n        super(props);\n        this.kadai = this.props.kadai;\n    }\n\n    render = () => {\n        return (\n            <div>\n                <h3 className=\"kadaiTitle\">{this.kadai.title}</h3>\n                <ul>\n                    <li>課題内容:\n                        <p className=\"kadaiBody\">{this.kadai.content}</p>\n                    </li>\n                    <li> 下書き:\n                        <p className=\"kadaiBody\">{this.kadai.draft}</p>\n                    </li>\n                </ul>\n                <button className=\"edit\" onClick={this.props.handleEdit} >編集</button>\n                <button className=\"done\" onClick={this.props.handleDone} >提出完了</button>\n            </div>\n        );\n    };\n}\n\nclass KadaiEditor extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kadai: this.props.kadai\n        };\n    }\n\n    handleSubmit = e => {\n        this.props.onSubmit(this.state.kadai);\n        this.setState({kadai: {\n            title: \"\",\n            content: \"\",\n            draft: \"\"\n        }})\n        e.preventDefault();\n    }\n\n    handleChange = (key, value) => {\n        let kadai = this.state.kadai;\n        kadai[key] = value;\n        this.setState({kadai});\n    }\n\n    render = () => {\n        const kadai = this.state.kadai;\n        return (<div>\n            <form onSubmit={this.handleSubmit}>\n                <ul>\n                    <KadaiForm type=\"title\" value={kadai.title} changeHandler={this.handleChange} />\n                    <KadaiForm type=\"content\" value={kadai.content} changeHandler={this.handleChange} />\n                    <KadaiForm type=\"draft\" value={kadai.draft} changeHandler={this.handleChange} />\n                    <input type=\"submit\" value=\"完了\" />\n                </ul>\n            </form>\n        </div>)\n    }\n}\n\nclass UpdateKadai extends React.Component {\n    constructor(props) {\n        super(props);\n        this.kadai = this.props.kadai;\n    }\n\n    updateKadai = kadai => {\n        const baseURL = `http://localhost:8080/kadai/update?`;\n\n        const body = new URLSearchParams();\n        body.set('kadai_id', kadai.id);\n        body.set('title', kadai.title);\n        body.set('content', kadai.content);\n        body.set('draft', kadai.draft);\n\n        fetch(baseURL + body.toString(), {\n            method: \"POST\",\n            headers: new Headers({\n                'Accept': 'application/json',\n            }),\n            body: body\n        })\n            .then(response => response.json())\n            .then(data => {\n                if (data[\"error\"]) {\n                    alert(data.error);\n                    return\n                }\n                console.log(data)\n            })\n            .catch(error => {\n                let text = error;\n                if (error[\"error\"]) {\n                    const text = error.error;\n                }\n                alert(\"エラーが発生しました：\" + text);\n            })\n            .finally(() => {\n                this.props.finishEdit(kadai);\n                console.log(\"end\");\n                this.props.refresh();\n            });\n\n    }\n\n    render = () => (\n        <KadaiEditor kadai={this.kadai} onSubmit={this.updateKadai} />\n    )\n}\n\n\nclass PostKadai extends React.Component {\n    constructor(props) {\n        super(props);\n        this.kadai = {\n            user_id: this.props.user.id,\n            title: \"\",\n            content: \"\",\n            draft: \"\",\n            editing: true\n        };\n        this.user = this.props.user;\n    }\n\n    postNewKadai = kadai => {\n        const postURL = \"http://localhost:8080/kadai/new\";\n\n        const body = new URLSearchParams();\n        body.append('user_id', this.user.id);\n        body.append('title', kadai.title);\n        body.append('content', kadai.content);\n        body.append('draft', kadai.draft);\n\n        fetch(postURL, {\n            method: \"POST\",\n            headers: new Headers({\n                'Accept': 'application/json',\n            }),\n            body: body\n        }).then(response => response.json())\n          .then(data => {\n            if (data[\"error\"]) {\n                console.error(data.error);\n            }\n            console.log(data)\n            this.props.refresh();\n        }).catch(error => {\n                let text = error;\n                if (error[\"error\"]) {\n                    const text = error.error;\n                }\n                alert(\"エラーが発生しました：\" + text);\n            });\n\n    }\n\n    render = () => (\n        <KadaiEditor kadai={this.kadai} onSubmit={this.postNewKadai} />\n    );\n}\n\nclass KadaiForm extends React.Component {\n    handleChange = e => {\n        this.props.changeHandler(this.props.type, e.target.value);\n        e.preventDefault();\n    }\n    render = () => {\n        const type = this.props.type;\n\n        const showText = {\n            \"title\": \"課題名\",\n            \"content\": \"課題内容\",\n            \"draft\": \"下書き\"\n        };\n        const text = showText[type];\n\n        const input = (type === \"title\")\n            ? <input\n                type=\"text\"\n                value={this.props.value}\n                onChange={this.handleChange}\n                className=\"kadaiEditTitle\" />\n            : <textarea\n                type=\"text\"\n                value={this.props.value}\n                onChange={this.handleChange}\n                className=\"kadaiEditBody\" />;\n\n        return (\n            <li>\n                <p>{text}</p>\n                {input}\n            </li>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}